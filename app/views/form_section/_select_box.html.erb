<%
   field_keys ||= []
   name = field_tag_name formObject, select_box, field_keys
   name += "[]" if select_box.multi_select
   field_id = "#{select_box.form.name.dehumanize}_#{sanitize_to_id name}"
   should_default =
    (defined?(is_subform) && is_subform) ||
    (defined?(is_modal_subform) && is_modal_subform) ||
    formObject.new_record?
   value = select_box.selected_value if select_box.selected_value.present? && should_default
   value ||= field_value formObject, select_box, field_keys
   field_tags = select_box.field_tags.present? ? select_box.field_tags : []
   is_disabled = select_box.disabled || select_box.name == 'assigned_user_names'
   disable = (defined?(is_subform) && is_subform) ? true : is_disabled
%>

<div class="row">
  <div class="medium-4 columns">
      <span class="tool-tip-label">
        <%= label_tag field_id, select_box.display_name, :class=>'key inline'  %>
      </span>
  </div>
  <div class="medium-8 columns">
    <% if select_box.required %><span class="required form-section-required">*</span><% end %>
    <% if select_box.multi_select %>
      <%= select_tag name, options_for_select(select_options(select_box, formObject, @lookups), value), 'multiple' => '',
          'class' => "chosen-select #{'chosen-rtl' if @page_direction == 'rtl'}", 'data-placeholder' => t("fields.chosen_placeholder"), 'id' => field_id,
          :data => { :field_tags => field_tags, :populate => option_string_source_data_attr(select_box.option_strings_source), value: value},
          required: select_box.required, :disabled => disable, :is_disabled => is_disabled, :"data-abide-ignore" => !select_box.required || (defined?(is_subform) && is_subform) ? "" : nil  %>
    <% elsif select_box.searchable_select %>
      <%= select_tag name, options_for_select(select_options(select_box, formObject, @lookups), value),
          'class' => "chosen-select #{'chosen-rtl' if @page_direction == 'rtl'}", 'data-placeholder' => t("fields.select_box_empty_item"), :id => field_id,
          :data => { :field_tags => field_tags, :populate => option_string_source_data_attr(select_box.option_strings_source), value: value},
          required: select_box.required, :disabled => disable, :is_disabled => is_disabled, :"data-abide-ignore" => !select_box.required || (defined?(is_subform) && is_subform) ? "" : nil  %>
    <% else %>
      <%
        #TODO: We should combine single and multi selects and simplify this code
        # select_box.searchable_select is a hack, refactor, refactor, refactor!

        #TODO: Pending disabled for choosen.
        #workaround to avoid present the default value (Select...) when the select_box
        #is disable and we are on new record.
        if is_disabled && value.blank? && formObject.new_record?
          select_box_select_options = []
        else
          select_box_select_options = select_options(select_box, formObject, nil)
        end
      %>
      <%= select_tag name, options_for_select(select_box_select_options, value), :id => field_id,
          'class' => "chosen-select #{'chosen-rtl' if @page_direction == 'rtl'}", 'data-placeholder' => t("fields.select_box_empty_item"),
          :data => { :field_tags => field_tags, :populate => option_string_source_data_attr(select_box.option_strings_source), value: value},
          :disabled => disable, :required => select_box.required, :is_disabled => is_disabled, :"data-abide-ignore" => !select_box.required || (defined?(is_subform) && is_subform) ? "" : nil  %>
    <% end %>
    <% if select_box.name == 'assigned_user_names' && can?(:remove_assigned_users, formObject.class) %>
      <%= link_to t('buttons.remove_referrals'), '', class: 'toggable_field_with_permissions' %>
    <% end %>
    <% if select_box.guiding_questions.present? %>
      <%= render 'form_section/guiding_questions', guiding_questions_text: select_box.guiding_questions %>
    <% end %>
    <% if select_box.help_text.present? %><p class="help"><%= select_box.help_text  %></p><% end %>
  </div>
</div>
